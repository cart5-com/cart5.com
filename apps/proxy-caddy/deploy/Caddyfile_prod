{
	#debug
	cache {
		default_cache_control no-store
		# to maintain server-side caching even when clients send no-cache headers
		mode bypass_request
		api {
			souin # Enables the Souin API endpoint
			basepath {$SOUIN_API_BASEPATH}
		}
	}
	on_demand_tls {
		ask http://127.0.0.1:3000/validate_tls
		# https://caddyserver.com/docs/caddyfile/options#on-demand-tls
		# ðŸŸ¨interval and burst rate limiting options were available, but are NOT recommended. 
		# Remove them from your config if you still have them.
		# interval 2m
		# burst 5
	}
}

(handleErrors) {
	handle_errors {
		@429 `{err.status_code} == 429`
		handle @429 {
			header Content-Type application/json
			respond `{"error": {"message": "Rate limit exceeded. Please try again later.", "code": "429"}}` 429
		}
		handle {
			header Content-Type application/json
			respond `{"error": {"message": "An error occurred. Please try again later. status_code:'{err.status_code}' status_text:'{err.status_text}'", "code": "{err.status_code}"}}` {err.status_code}
		}
	}
}

(api-hono-proxy) {
	handle_path /__p_api/* {
		rate_limit {
			zone api_standard {
				key {remote_host}
				events 200
				window 1m
			}
			zone api_sensitive {
				match {
					path /__p_api/gmaps*
				}
				key {remote_host}
				events 10
				window 1m
			}
		}
		#api-hono
		reverse_proxy http://127.0.0.1:3000
	}
}

(dashboard-spa-vue) {
	handle_path /dashboard/* {
		#dashboard-spa-vue
		reverse_proxy http://127.0.0.1:3004
	}
}

# redirect to HTTPS
:80 {
	redir https://{host}{uri}
}

https://auth.{$PUBLIC_DOMAIN_NAME} {
	tls {
		on_demand
	}
	import api-hono-proxy
	handle_path /* {
		#auth-frontend-vue
		reverse_proxy http://127.0.0.1:3001
		cache
	}
}

https://{$PUBLIC_DOMAIN_NAME} {
	redir https://www.{host}{uri}
}

(ssr-handles) {
	import handleErrors
	import api-hono-proxy
	import dashboard-spa-vue
	handle_path /* {
		#web-store-ssr-astro
		reverse_proxy http://127.0.0.1:3002
		cache
	}
}

# our domains
*.{$PUBLIC_DOMAIN_NAME} {
	tls {
		dns cloudflare {$CF_API_TOKEN}
		# CF_API_TOKEN permissions from cloudflare: (Zone.Zone, Zone.DNS) for All zones
	}
	import ssr-handles
}

# third-party-domains
:443 {
	tls {
		on_demand
	}
	import ssr-handles
}
